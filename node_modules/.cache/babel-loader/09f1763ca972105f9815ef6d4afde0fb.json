{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactnative\\\\TescaroTechAviacaoWeb\\\\src\\\\sidebar.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANCEL_DISTANCE_ON_SCROLL = 20;\nconst defaultStyles = {\n  root: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflow: \"hidden\"\n  },\n  sidebar: {\n    zIndex: 2,\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    transition: \"transform .3s ease-out\",\n    WebkitTransition: \"-webkit-transform .3s ease-out\",\n    willChange: \"transform\",\n    overflowY: \"auto\"\n  },\n  content: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflowY: \"auto\",\n    WebkitOverflowScrolling: \"touch\",\n    transition: \"left .3s ease-out, right .3s ease-out\"\n  },\n  overlay: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0,\n    visibility: \"hidden\",\n    transition: \"opacity .3s ease-out, visibility .3s ease-out\",\n    backgroundColor: \"rgba(0,0,0,.3)\"\n  },\n  dragHandle: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    bottom: 0\n  }\n};\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // the detected width of the sidebar in pixels\n      sidebarWidth: props.defaultSidebarWidth,\n      // keep track of touching params\n      touchIdentifier: null,\n      touchStartX: null,\n      touchCurrentX: null,\n      // if touch is supported by the browser\n      dragSupported: false\n    };\n    this.overlayClicked = this.overlayClicked.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n    this.saveSidebarRef = this.saveSidebarRef.bind(this);\n  }\n\n  componentDidMount() {\n    const isIos = /iPad|iPhone|iPod/.test(navigator ? navigator.userAgent : \"\");\n    this.setState({\n      dragSupported: typeof window === \"object\" && \"ontouchstart\" in window && !isIos\n    });\n    this.saveSidebarWidth();\n  }\n\n  componentDidUpdate() {\n    // filter out the updates when we're touching\n    if (!this.isTouching()) {\n      this.saveSidebarWidth();\n    }\n  }\n\n  onTouchStart(ev) {\n    // filter out if a user starts swiping with a second finger\n    if (!this.isTouching()) {\n      const touch = ev.targetTouches[0];\n      this.setState({\n        touchIdentifier: touch.identifier,\n        touchStartX: touch.clientX,\n        touchCurrentX: touch.clientX\n      });\n    }\n  }\n\n  onTouchMove(ev) {\n    if (this.isTouching()) {\n      for (let ind = 0; ind < ev.targetTouches.length; ind++) {\n        // we only care about the finger that we are tracking\n        if (ev.targetTouches[ind].identifier === this.state.touchIdentifier) {\n          this.setState({\n            touchCurrentX: ev.targetTouches[ind].clientX\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  onTouchEnd() {\n    if (this.isTouching()) {\n      // trigger a change to open if sidebar has been dragged beyond dragToggleDistance\n      const touchWidth = this.touchSidebarWidth();\n\n      if (this.props.open && touchWidth < this.state.sidebarWidth - this.props.dragToggleDistance || !this.props.open && touchWidth > this.props.dragToggleDistance) {\n        this.props.onSetOpen(!this.props.open);\n      }\n\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  } // This logic helps us prevents the user from sliding the sidebar horizontally\n  // while scrolling the sidebar vertically. When a scroll event comes in, we're\n  // cancelling the ongoing gesture if it did not move horizontally much.\n\n\n  onScroll() {\n    if (this.isTouching() && this.inCancelDistanceOnScroll()) {\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  } // True if the on going gesture X distance is less than the cancel distance\n\n\n  inCancelDistanceOnScroll() {\n    let cancelDistanceOnScroll;\n\n    if (this.props.pullRight) {\n      cancelDistanceOnScroll = Math.abs(this.state.touchCurrentX - this.state.touchStartX) < CANCEL_DISTANCE_ON_SCROLL;\n    } else {\n      cancelDistanceOnScroll = Math.abs(this.state.touchStartX - this.state.touchCurrentX) < CANCEL_DISTANCE_ON_SCROLL;\n    }\n\n    return cancelDistanceOnScroll;\n  }\n\n  isTouching() {\n    return this.state.touchIdentifier !== null;\n  }\n\n  overlayClicked() {\n    if (this.props.open) {\n      this.props.onSetOpen(false);\n    }\n  }\n\n  saveSidebarWidth() {\n    const width = this.sidebar.offsetWidth;\n\n    if (width !== this.state.sidebarWidth) {\n      this.setState({\n        sidebarWidth: width\n      });\n    }\n  }\n\n  saveSidebarRef(node) {\n    this.sidebar = node;\n  } // calculate the sidebarWidth based on current touch info\n\n\n  touchSidebarWidth() {\n    // if the sidebar is open and start point of drag is inside the sidebar\n    // we will only drag the distance they moved their finger\n    // otherwise we will move the sidebar to be below the finger.\n    if (this.props.pullRight) {\n      if (this.props.open && window.innerWidth - this.state.touchStartX < this.state.sidebarWidth) {\n        if (this.state.touchCurrentX > this.state.touchStartX) {\n          return this.state.sidebarWidth + this.state.touchStartX - this.state.touchCurrentX;\n        }\n\n        return this.state.sidebarWidth;\n      }\n\n      return Math.min(window.innerWidth - this.state.touchCurrentX, this.state.sidebarWidth);\n    }\n\n    if (this.props.open && this.state.touchStartX < this.state.sidebarWidth) {\n      if (this.state.touchCurrentX > this.state.touchStartX) {\n        return this.state.sidebarWidth;\n      }\n\n      return this.state.sidebarWidth - this.state.touchStartX + this.state.touchCurrentX;\n    }\n\n    return Math.min(this.state.touchCurrentX, this.state.sidebarWidth);\n  }\n\n  render() {\n    const sidebarStyle = { ...defaultStyles.sidebar,\n      ...this.props.styles.sidebar\n    };\n    const contentStyle = { ...defaultStyles.content,\n      ...this.props.styles.content\n    };\n    const overlayStyle = { ...defaultStyles.overlay,\n      ...this.props.styles.overlay\n    };\n    const useTouch = this.state.dragSupported && this.props.touch;\n    const isTouching = this.isTouching();\n    const rootProps = {\n      className: this.props.rootClassName,\n      style: { ...defaultStyles.root,\n        ...this.props.styles.root\n      },\n      role: \"navigation\",\n      id: this.props.rootId\n    };\n    let dragHandle;\n    const hasBoxShadow = this.props.shadow && (isTouching || this.props.open || this.props.docked); // sidebarStyle right/left\n\n    if (this.props.pullRight) {\n      sidebarStyle.right = 0;\n      sidebarStyle.transform = \"translateX(100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(100%)\";\n\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"-2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    } else {\n      sidebarStyle.left = 0;\n      sidebarStyle.transform = \"translateX(-100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(-100%)\";\n\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    }\n\n    if (isTouching) {\n      const percentage = this.touchSidebarWidth() / this.state.sidebarWidth; // slide open to what we dragged\n\n      if (this.props.pullRight) {\n        sidebarStyle.transform = `translateX(${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(${(1 - percentage) * 100}%)`;\n      } else {\n        sidebarStyle.transform = `translateX(-${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(-${(1 - percentage) * 100}%)`;\n      } // fade overlay to match distance of drag\n\n\n      overlayStyle.opacity = percentage;\n      overlayStyle.visibility = \"visible\";\n    } else if (this.props.docked) {\n      // show sidebar\n      if (this.state.sidebarWidth !== 0) {\n        sidebarStyle.transform = `translateX(0%)`;\n        sidebarStyle.WebkitTransform = `translateX(0%)`;\n      } // make space on the left/right side of the content for the sidebar\n\n\n      if (this.props.pullRight) {\n        contentStyle.right = `${this.state.sidebarWidth}px`;\n      } else {\n        contentStyle.left = `${this.state.sidebarWidth}px`;\n      }\n    } else if (this.props.open) {\n      // slide open sidebar\n      sidebarStyle.transform = `translateX(0%)`;\n      sidebarStyle.WebkitTransform = `translateX(0%)`; // show overlay\n\n      overlayStyle.opacity = 1;\n      overlayStyle.visibility = \"visible\";\n    }\n\n    if (isTouching || !this.props.transitions) {\n      sidebarStyle.transition = \"none\";\n      sidebarStyle.WebkitTransition = \"none\";\n      contentStyle.transition = \"none\";\n      overlayStyle.transition = \"none\";\n    }\n\n    if (useTouch) {\n      if (this.props.open) {\n        rootProps.onTouchStart = this.onTouchStart;\n        rootProps.onTouchMove = this.onTouchMove;\n        rootProps.onTouchEnd = this.onTouchEnd;\n        rootProps.onTouchCancel = this.onTouchEnd;\n        rootProps.onScroll = this.onScroll;\n      } else {\n        const dragHandleStyle = { ...defaultStyles.dragHandle,\n          ...this.props.styles.dragHandle\n        };\n        dragHandleStyle.width = this.props.touchHandleWidth; // dragHandleStyle right/left\n\n        if (this.props.pullRight) {\n          dragHandleStyle.right = 0;\n        } else {\n          dragHandleStyle.left = 0;\n        }\n\n        dragHandle = /*#__PURE__*/_jsxDEV(\"div\", {\n          style: dragHandleStyle,\n          onTouchStart: this.onTouchStart,\n          onTouchMove: this.onTouchMove,\n          onTouchEnd: this.onTouchEnd,\n          onTouchCancel: this.onTouchEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", { ...rootProps,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.props.sidebarClassName,\n        style: sidebarStyle,\n        ref: this.saveSidebarRef,\n        id: this.props.sidebarId,\n        children: this.props.sidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.props.overlayClassName,\n        style: overlayStyle,\n        onClick: this.overlayClicked,\n        id: this.props.overlayId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.props.contentClassName,\n        style: contentStyle,\n        id: this.props.contentId,\n        children: [dragHandle, this.props.children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSidebar.propTypes = {\n  // main content to render\n  children: PropTypes.node.isRequired,\n  // styles\n  styles: PropTypes.shape({\n    root: PropTypes.object,\n    sidebar: PropTypes.object,\n    content: PropTypes.object,\n    overlay: PropTypes.object,\n    dragHandle: PropTypes.object\n  }),\n  // root component optional class\n  rootClassName: PropTypes.string,\n  // sidebar optional class\n  sidebarClassName: PropTypes.string,\n  // content optional class\n  contentClassName: PropTypes.string,\n  // overlay optional class\n  overlayClassName: PropTypes.string,\n  // sidebar content to render\n  sidebar: PropTypes.node.isRequired,\n  // boolean if sidebar should be docked\n  docked: PropTypes.bool,\n  // boolean if sidebar should slide open\n  open: PropTypes.bool,\n  // boolean if transitions should be disabled\n  transitions: PropTypes.bool,\n  // boolean if touch gestures are enabled\n  touch: PropTypes.bool,\n  // max distance from the edge we can start touching\n  touchHandleWidth: PropTypes.number,\n  // Place the sidebar on the right\n  pullRight: PropTypes.bool,\n  // Enable/Disable sidebar shadow\n  shadow: PropTypes.bool,\n  // distance we have to drag the sidebar to toggle open state\n  dragToggleDistance: PropTypes.number,\n  // callback called when the overlay is clicked\n  onSetOpen: PropTypes.func,\n  // Initial sidebar width when page loads\n  defaultSidebarWidth: PropTypes.number,\n  // root component optional id\n  rootId: PropTypes.string,\n  // sidebar optional id\n  sidebarId: PropTypes.string,\n  // content optional id\n  contentId: PropTypes.string,\n  // overlay optional id\n  overlayId: PropTypes.string\n};\nSidebar.defaultProps = {\n  docked: false,\n  open: false,\n  transitions: true,\n  touch: true,\n  touchHandleWidth: 20,\n  pullRight: false,\n  shadow: true,\n  dragToggleDistance: 30,\n  onSetOpen: () => {},\n  styles: {},\n  defaultSidebarWidth: 0\n};\nexport default Sidebar;","map":{"version":3,"names":["React","Component","PropTypes","CANCEL_DISTANCE_ON_SCROLL","defaultStyles","root","position","top","left","right","bottom","overflow","sidebar","zIndex","transition","WebkitTransition","willChange","overflowY","content","WebkitOverflowScrolling","overlay","opacity","visibility","backgroundColor","dragHandle","Sidebar","constructor","props","state","sidebarWidth","defaultSidebarWidth","touchIdentifier","touchStartX","touchCurrentX","dragSupported","overlayClicked","bind","onTouchStart","onTouchMove","onTouchEnd","onScroll","saveSidebarRef","componentDidMount","isIos","test","navigator","userAgent","setState","window","saveSidebarWidth","componentDidUpdate","isTouching","ev","touch","targetTouches","identifier","clientX","ind","length","touchWidth","touchSidebarWidth","open","dragToggleDistance","onSetOpen","inCancelDistanceOnScroll","cancelDistanceOnScroll","pullRight","Math","abs","width","offsetWidth","node","innerWidth","min","render","sidebarStyle","styles","contentStyle","overlayStyle","useTouch","rootProps","className","rootClassName","style","role","id","rootId","hasBoxShadow","shadow","docked","transform","WebkitTransform","boxShadow","percentage","transitions","onTouchCancel","dragHandleStyle","touchHandleWidth","sidebarClassName","sidebarId","overlayClassName","overlayId","contentClassName","contentId","children","propTypes","isRequired","shape","object","string","bool","number","func","defaultProps"],"sources":["C:/reactnative/TescaroTechAviacaoWeb/src/sidebar.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst CANCEL_DISTANCE_ON_SCROLL = 20;\n\nconst defaultStyles = {\n  root: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflow: \"hidden\"\n  },\n  sidebar: {\n    zIndex: 2,\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    transition: \"transform .3s ease-out\",\n    WebkitTransition: \"-webkit-transform .3s ease-out\",\n    willChange: \"transform\",\n    overflowY: \"auto\"\n  },\n  content: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflowY: \"auto\",\n    WebkitOverflowScrolling: \"touch\",\n    transition: \"left .3s ease-out, right .3s ease-out\"\n  },\n  overlay: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0,\n    visibility: \"hidden\",\n    transition: \"opacity .3s ease-out, visibility .3s ease-out\",\n    backgroundColor: \"rgba(0,0,0,.3)\"\n  },\n  dragHandle: {\n    zIndex: 1,\n    position: \"fixed\",\n    top: 0,\n    bottom: 0\n  }\n};\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // the detected width of the sidebar in pixels\n      sidebarWidth: props.defaultSidebarWidth,\n\n      // keep track of touching params\n      touchIdentifier: null,\n      touchStartX: null,\n      touchCurrentX: null,\n\n      // if touch is supported by the browser\n      dragSupported: false\n    };\n\n    this.overlayClicked = this.overlayClicked.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n    this.saveSidebarRef = this.saveSidebarRef.bind(this);\n  }\n\n  componentDidMount() {\n    const isIos = /iPad|iPhone|iPod/.test(navigator ? navigator.userAgent : \"\");\n    this.setState({\n      dragSupported:\n        typeof window === \"object\" && \"ontouchstart\" in window && !isIos\n    });\n    this.saveSidebarWidth();\n  }\n\n  componentDidUpdate() {\n    // filter out the updates when we're touching\n    if (!this.isTouching()) {\n      this.saveSidebarWidth();\n    }\n  }\n\n  onTouchStart(ev) {\n    // filter out if a user starts swiping with a second finger\n    if (!this.isTouching()) {\n      const touch = ev.targetTouches[0];\n      this.setState({\n        touchIdentifier: touch.identifier,\n        touchStartX: touch.clientX,\n        touchCurrentX: touch.clientX\n      });\n    }\n  }\n\n  onTouchMove(ev) {\n    if (this.isTouching()) {\n      for (let ind = 0; ind < ev.targetTouches.length; ind++) {\n        // we only care about the finger that we are tracking\n        if (ev.targetTouches[ind].identifier === this.state.touchIdentifier) {\n          this.setState({\n            touchCurrentX: ev.targetTouches[ind].clientX\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  onTouchEnd() {\n    if (this.isTouching()) {\n      // trigger a change to open if sidebar has been dragged beyond dragToggleDistance\n      const touchWidth = this.touchSidebarWidth();\n\n      if (\n        (this.props.open &&\n          touchWidth <\n            this.state.sidebarWidth - this.props.dragToggleDistance) ||\n        (!this.props.open && touchWidth > this.props.dragToggleDistance)\n      ) {\n        this.props.onSetOpen(!this.props.open);\n      }\n\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  }\n\n  // This logic helps us prevents the user from sliding the sidebar horizontally\n  // while scrolling the sidebar vertically. When a scroll event comes in, we're\n  // cancelling the ongoing gesture if it did not move horizontally much.\n  onScroll() {\n    if (this.isTouching() && this.inCancelDistanceOnScroll()) {\n      this.setState({\n        touchIdentifier: null,\n        touchStartX: null,\n        touchCurrentX: null\n      });\n    }\n  }\n\n  // True if the on going gesture X distance is less than the cancel distance\n  inCancelDistanceOnScroll() {\n    let cancelDistanceOnScroll;\n\n    if (this.props.pullRight) {\n      cancelDistanceOnScroll =\n        Math.abs(this.state.touchCurrentX - this.state.touchStartX) <\n        CANCEL_DISTANCE_ON_SCROLL;\n    } else {\n      cancelDistanceOnScroll =\n        Math.abs(this.state.touchStartX - this.state.touchCurrentX) <\n        CANCEL_DISTANCE_ON_SCROLL;\n    }\n    return cancelDistanceOnScroll;\n  }\n\n  isTouching() {\n    return this.state.touchIdentifier !== null;\n  }\n\n  overlayClicked() {\n    if (this.props.open) {\n      this.props.onSetOpen(false);\n    }\n  }\n\n  saveSidebarWidth() {\n    const width = this.sidebar.offsetWidth;\n\n    if (width !== this.state.sidebarWidth) {\n      this.setState({ sidebarWidth: width });\n    }\n  }\n\n  saveSidebarRef(node) {\n    this.sidebar = node;\n  }\n\n  // calculate the sidebarWidth based on current touch info\n  touchSidebarWidth() {\n    // if the sidebar is open and start point of drag is inside the sidebar\n    // we will only drag the distance they moved their finger\n    // otherwise we will move the sidebar to be below the finger.\n    if (this.props.pullRight) {\n      if (\n        this.props.open &&\n        window.innerWidth - this.state.touchStartX < this.state.sidebarWidth\n      ) {\n        if (this.state.touchCurrentX > this.state.touchStartX) {\n          return (\n            this.state.sidebarWidth +\n            this.state.touchStartX -\n            this.state.touchCurrentX\n          );\n        }\n        return this.state.sidebarWidth;\n      }\n      return Math.min(\n        window.innerWidth - this.state.touchCurrentX,\n        this.state.sidebarWidth\n      );\n    }\n\n    if (this.props.open && this.state.touchStartX < this.state.sidebarWidth) {\n      if (this.state.touchCurrentX > this.state.touchStartX) {\n        return this.state.sidebarWidth;\n      }\n      return (\n        this.state.sidebarWidth -\n        this.state.touchStartX +\n        this.state.touchCurrentX\n      );\n    }\n    return Math.min(this.state.touchCurrentX, this.state.sidebarWidth);\n  }\n\n  render() {\n    const sidebarStyle = {\n      ...defaultStyles.sidebar,\n      ...this.props.styles.sidebar\n    };\n    const contentStyle = {\n      ...defaultStyles.content,\n      ...this.props.styles.content\n    };\n    const overlayStyle = {\n      ...defaultStyles.overlay,\n      ...this.props.styles.overlay\n    };\n    const useTouch = this.state.dragSupported && this.props.touch;\n    const isTouching = this.isTouching();\n    const rootProps = {\n      className: this.props.rootClassName,\n      style: { ...defaultStyles.root, ...this.props.styles.root },\n      role: \"navigation\",\n      id: this.props.rootId\n    };\n    let dragHandle;\n\n    const hasBoxShadow =\n      this.props.shadow && (isTouching || this.props.open || this.props.docked);\n    // sidebarStyle right/left\n    if (this.props.pullRight) {\n      sidebarStyle.right = 0;\n      sidebarStyle.transform = \"translateX(100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(100%)\";\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"-2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    } else {\n      sidebarStyle.left = 0;\n      sidebarStyle.transform = \"translateX(-100%)\";\n      sidebarStyle.WebkitTransform = \"translateX(-100%)\";\n      if (hasBoxShadow) {\n        sidebarStyle.boxShadow = \"2px 2px 4px rgba(0, 0, 0, 0.15)\";\n      }\n    }\n\n    if (isTouching) {\n      const percentage = this.touchSidebarWidth() / this.state.sidebarWidth;\n\n      // slide open to what we dragged\n      if (this.props.pullRight) {\n        sidebarStyle.transform = `translateX(${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(${(1 - percentage) * 100}%)`;\n      } else {\n        sidebarStyle.transform = `translateX(-${(1 - percentage) * 100}%)`;\n        sidebarStyle.WebkitTransform = `translateX(-${(1 - percentage) *\n          100}%)`;\n      }\n\n      // fade overlay to match distance of drag\n      overlayStyle.opacity = percentage;\n      overlayStyle.visibility = \"visible\";\n    } else if (this.props.docked) {\n      // show sidebar\n      if (this.state.sidebarWidth !== 0) {\n        sidebarStyle.transform = `translateX(0%)`;\n        sidebarStyle.WebkitTransform = `translateX(0%)`;\n      }\n\n      // make space on the left/right side of the content for the sidebar\n      if (this.props.pullRight) {\n        contentStyle.right = `${this.state.sidebarWidth}px`;\n      } else {\n        contentStyle.left = `${this.state.sidebarWidth}px`;\n      }\n    } else if (this.props.open) {\n      // slide open sidebar\n      sidebarStyle.transform = `translateX(0%)`;\n      sidebarStyle.WebkitTransform = `translateX(0%)`;\n\n      // show overlay\n      overlayStyle.opacity = 1;\n      overlayStyle.visibility = \"visible\";\n    }\n\n    if (isTouching || !this.props.transitions) {\n      sidebarStyle.transition = \"none\";\n      sidebarStyle.WebkitTransition = \"none\";\n      contentStyle.transition = \"none\";\n      overlayStyle.transition = \"none\";\n    }\n\n    if (useTouch) {\n      if (this.props.open) {\n        rootProps.onTouchStart = this.onTouchStart;\n        rootProps.onTouchMove = this.onTouchMove;\n        rootProps.onTouchEnd = this.onTouchEnd;\n        rootProps.onTouchCancel = this.onTouchEnd;\n        rootProps.onScroll = this.onScroll;\n      } else {\n        const dragHandleStyle = {\n          ...defaultStyles.dragHandle,\n          ...this.props.styles.dragHandle\n        };\n        dragHandleStyle.width = this.props.touchHandleWidth;\n\n        // dragHandleStyle right/left\n        if (this.props.pullRight) {\n          dragHandleStyle.right = 0;\n        } else {\n          dragHandleStyle.left = 0;\n        }\n\n        dragHandle = (\n          <div\n            style={dragHandleStyle}\n            onTouchStart={this.onTouchStart}\n            onTouchMove={this.onTouchMove}\n            onTouchEnd={this.onTouchEnd}\n            onTouchCancel={this.onTouchEnd}\n          />\n        );\n      }\n    }\n\n    return (\n      <div {...rootProps}>\n        <div\n          className={this.props.sidebarClassName}\n          style={sidebarStyle}\n          ref={this.saveSidebarRef}\n          id={this.props.sidebarId}\n        >\n          {this.props.sidebar}\n        </div>\n        {/* eslint-disable */}\n        <div\n          className={this.props.overlayClassName}\n          style={overlayStyle}\n          onClick={this.overlayClicked}\n          id={this.props.overlayId}\n        />\n        {/* eslint-enable */}\n        <div\n          className={this.props.contentClassName}\n          style={contentStyle}\n          id={this.props.contentId}\n        >\n          {dragHandle}\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nSidebar.propTypes = {\n  // main content to render\n  children: PropTypes.node.isRequired,\n\n  // styles\n  styles: PropTypes.shape({\n    root: PropTypes.object,\n    sidebar: PropTypes.object,\n    content: PropTypes.object,\n    overlay: PropTypes.object,\n    dragHandle: PropTypes.object\n  }),\n\n  // root component optional class\n  rootClassName: PropTypes.string,\n\n  // sidebar optional class\n  sidebarClassName: PropTypes.string,\n\n  // content optional class\n  contentClassName: PropTypes.string,\n\n  // overlay optional class\n  overlayClassName: PropTypes.string,\n\n  // sidebar content to render\n  sidebar: PropTypes.node.isRequired,\n\n  // boolean if sidebar should be docked\n  docked: PropTypes.bool,\n\n  // boolean if sidebar should slide open\n  open: PropTypes.bool,\n\n  // boolean if transitions should be disabled\n  transitions: PropTypes.bool,\n\n  // boolean if touch gestures are enabled\n  touch: PropTypes.bool,\n\n  // max distance from the edge we can start touching\n  touchHandleWidth: PropTypes.number,\n\n  // Place the sidebar on the right\n  pullRight: PropTypes.bool,\n\n  // Enable/Disable sidebar shadow\n  shadow: PropTypes.bool,\n\n  // distance we have to drag the sidebar to toggle open state\n  dragToggleDistance: PropTypes.number,\n\n  // callback called when the overlay is clicked\n  onSetOpen: PropTypes.func,\n\n  // Initial sidebar width when page loads\n  defaultSidebarWidth: PropTypes.number,\n\n  // root component optional id\n  rootId: PropTypes.string,\n\n  // sidebar optional id\n  sidebarId: PropTypes.string,\n\n  // content optional id\n  contentId: PropTypes.string,\n\n  // overlay optional id\n  overlayId: PropTypes.string\n};\n\nSidebar.defaultProps = {\n  docked: false,\n  open: false,\n  transitions: true,\n  touch: true,\n  touchHandleWidth: 20,\n  pullRight: false,\n  shadow: true,\n  dragToggleDistance: 30,\n  onSetOpen: () => {},\n  styles: {},\n  defaultSidebarWidth: 0\n};\n\nexport default Sidebar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}