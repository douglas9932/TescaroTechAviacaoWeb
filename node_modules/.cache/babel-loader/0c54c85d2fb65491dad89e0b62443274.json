{"ast":null,"code":"'use strict';\n\nconst stringify = require('./stringify');\n/**\n * Constants\n */\n\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH,\n\n  /* \\ */\n  CHAR_BACKTICK,\n\n  /* ` */\n  CHAR_COMMA,\n\n  /* , */\n  CHAR_DOT,\n\n  /* . */\n  CHAR_LEFT_PARENTHESES,\n\n  /* ( */\n  CHAR_RIGHT_PARENTHESES,\n\n  /* ) */\n  CHAR_LEFT_CURLY_BRACE,\n\n  /* { */\n  CHAR_RIGHT_CURLY_BRACE,\n\n  /* } */\n  CHAR_LEFT_SQUARE_BRACKET,\n\n  /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET,\n\n  /* ] */\n  CHAR_DOUBLE_QUOTE,\n\n  /* \" */\n  CHAR_SINGLE_QUOTE,\n\n  /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n/**\n * parse\n */\n\n\nconst parse = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  let opts = options || {};\n  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n\n  let ast = {\n    type: 'root',\n    input,\n    nodes: []\n  };\n  let stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  let length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n  let memo = {};\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n\n  push({\n    type: 'bos'\n  });\n\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n    /**\n     * Escaped chars\n     */\n\n\n    if (value === CHAR_BACKSLASH) {\n      push({\n        type: 'text',\n        value: (options.keepEscaping ? value : '') + advance()\n      });\n      continue;\n    }\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({\n        type: 'text',\n        value: '\\\\' + value\n      });\n      continue;\n    }\n    /**\n     * Left square bracket: '['\n     */\n\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n      let closed = true;\n      let next;\n\n      while (index < length && (next = advance())) {\n        value += next;\n\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Parentheses\n     */\n\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({\n        type: 'paren',\n        nodes: []\n      });\n      stack.push(block);\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n\n      block = stack.pop();\n      push({\n        type: 'text',\n        value\n      });\n      block = stack[stack.length - 1];\n      continue;\n    }\n    /**\n     * Quotes: '|\"|`\n     */\n\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      let open = value;\n      let next;\n\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n\n        value += next;\n      }\n\n      push({\n        type: 'text',\n        value\n      });\n      continue;\n    }\n    /**\n     * Left curly brace: '{'\n     */\n\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      let brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n      block = push(brace);\n      stack.push(block);\n      push({\n        type: 'open',\n        value\n      });\n      continue;\n    }\n    /**\n     * Right curly brace: '}'\n     */\n\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n\n      let type = 'close';\n      block = stack.pop();\n      block.close = true;\n      push({\n        type,\n        value\n      });\n      depth--;\n      block = stack[stack.length - 1];\n      continue;\n    }\n    /**\n     * Comma: ','\n     */\n\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        let open = block.nodes.shift();\n        block.nodes = [open, {\n          type: 'text',\n          value: stringify(block)\n        }];\n      }\n\n      push({\n        type: 'comma',\n        value\n      });\n      block.commas++;\n      continue;\n    }\n    /**\n     * Dot: '.'\n     */\n\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      let siblings = block.nodes;\n\n      if (depth === 0 || siblings.length === 0) {\n        push({\n          type: 'text',\n          value\n        });\n        continue;\n      }\n\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n\n      if (prev.type === 'range') {\n        siblings.pop();\n        let before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n\n      push({\n        type: 'dot',\n        value\n      });\n      continue;\n    }\n    /**\n     * Text\n     */\n\n\n    push({\n      type: 'text',\n      value\n    });\n  } // Mark imbalanced braces and brackets as invalid\n\n\n  do {\n    block = stack.pop();\n\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      }); // get the location of the block on parent.nodes (block's siblings)\n\n      let parent = stack[stack.length - 1];\n      let index = parent.nodes.indexOf(block); // replace the (invalid) block with it's nodes\n\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n\n  push({\n    type: 'eos'\n  });\n  return ast;\n};\n\nmodule.exports = parse;","map":{"version":3,"names":["stringify","require","MAX_LENGTH","CHAR_BACKSLASH","CHAR_BACKTICK","CHAR_COMMA","CHAR_DOT","CHAR_LEFT_PARENTHESES","CHAR_RIGHT_PARENTHESES","CHAR_LEFT_CURLY_BRACE","CHAR_RIGHT_CURLY_BRACE","CHAR_LEFT_SQUARE_BRACKET","CHAR_RIGHT_SQUARE_BRACKET","CHAR_DOUBLE_QUOTE","CHAR_SINGLE_QUOTE","CHAR_NO_BREAK_SPACE","CHAR_ZERO_WIDTH_NOBREAK_SPACE","parse","input","options","TypeError","opts","max","maxLength","Math","min","length","SyntaxError","ast","type","nodes","stack","block","prev","brackets","index","depth","value","memo","advance","push","node","parent","keepEscaping","closed","next","pop","open","keepQuotes","dollar","slice","brace","close","commas","ranges","shift","siblings","range","invalid","args","before","forEach","isOpen","isClose","indexOf","splice","module","exports"],"sources":["C:/reactnative/TescaroTechAviacaoWeb/node_modules/braces/lib/parse.js"],"sourcesContent":["'use strict';\n\nconst stringify = require('./stringify');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH, /* \\ */\n  CHAR_BACKTICK, /* ` */\n  CHAR_COMMA, /* , */\n  CHAR_DOT, /* . */\n  CHAR_LEFT_PARENTHESES, /* ( */\n  CHAR_RIGHT_PARENTHESES, /* ) */\n  CHAR_LEFT_CURLY_BRACE, /* { */\n  CHAR_RIGHT_CURLY_BRACE, /* } */\n  CHAR_LEFT_SQUARE_BRACKET, /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET, /* ] */\n  CHAR_DOUBLE_QUOTE, /* \" */\n  CHAR_SINGLE_QUOTE, /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n\n/**\n * parse\n */\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  let opts = options || {};\n  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n\n  let ast = { type: 'root', input, nodes: [] };\n  let stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  let length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n  let memo = {};\n\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n\n  push({ type: 'bos' });\n\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n\n    /**\n     * Escaped chars\n     */\n\n    if (value === CHAR_BACKSLASH) {\n      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });\n      continue;\n    }\n\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({ type: 'text', value: '\\\\' + value });\n      continue;\n    }\n\n    /**\n     * Left square bracket: '['\n     */\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n\n      let closed = true;\n      let next;\n\n      while (index < length && (next = advance())) {\n        value += next;\n\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({ type: 'paren', nodes: [] });\n      stack.push(block);\n      push({ type: 'text', value });\n      continue;\n    }\n\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({ type: 'text', value });\n        continue;\n      }\n      block = stack.pop();\n      push({ type: 'text', value });\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Quotes: '|\"|`\n     */\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      let open = value;\n      let next;\n\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n\n        value += next;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Left curly brace: '{'\n     */\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n\n      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      let brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n\n      block = push(brace);\n      stack.push(block);\n      push({ type: 'open', value });\n      continue;\n    }\n\n    /**\n     * Right curly brace: '}'\n     */\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      let type = 'close';\n      block = stack.pop();\n      block.close = true;\n\n      push({ type, value });\n      depth--;\n\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Comma: ','\n     */\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        let open = block.nodes.shift();\n        block.nodes = [open, { type: 'text', value: stringify(block) }];\n      }\n\n      push({ type: 'comma', value });\n      block.commas++;\n      continue;\n    }\n\n    /**\n     * Dot: '.'\n     */\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      let siblings = block.nodes;\n\n      if (depth === 0 || siblings.length === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n\n      if (prev.type === 'range') {\n        siblings.pop();\n\n        let before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n\n      push({ type: 'dot', value });\n      continue;\n    }\n\n    /**\n     * Text\n     */\n\n    push({ type: 'text', value });\n  }\n\n  // Mark imbalanced braces and brackets as invalid\n  do {\n    block = stack.pop();\n\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      });\n\n      // get the location of the block on parent.nodes (block's siblings)\n      let parent = stack[stack.length - 1];\n      let index = parent.nodes.indexOf(block);\n      // replace the (invalid) block with it's nodes\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n\n  push({ type: 'eos' });\n  return ast;\n};\n\nmodule.exports = parse;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}