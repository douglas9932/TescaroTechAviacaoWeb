{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst scan = require('./scan');\n\nconst parse = require('./parse');\n\nconst utils = require('./utils');\n\nconst constants = require('./constants');\n\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\n\nconst picomatch = function (glob, options) {\n  let returnState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n\n      return false;\n    };\n\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || typeof glob !== 'string' && !isState) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n\n  if (opts.ignore) {\n    const ignoreOpts = { ...options,\n      ignore: null,\n      onMatch: null,\n      onResult: null\n    };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = function (input) {\n    let returnObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const {\n      isMatch,\n      match,\n      output\n    } = picomatch.test(input, regex, options, {\n      glob,\n      posix\n    });\n    const result = {\n      glob,\n      state,\n      regex,\n      posix,\n      input,\n      output,\n      match,\n      isMatch\n    };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\n\npicomatch.test = function (input, regex, options) {\n  let {\n    glob,\n    posix\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return {\n      isMatch: false,\n      output: ''\n    };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = match && format ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return {\n    isMatch: Boolean(match),\n    match,\n    output\n  };\n};\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\n\npicomatch.matchBase = function (input, glob, options) {\n  let posix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : utils.isWindows(options);\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options,\n    fastpaths: false\n  });\n};\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\n\npicomatch.scan = (input, options) => scan(input, options);\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\n\npicomatch.compileRe = function (state, options) {\n  let returnOutput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n  let source = `${prepend}(?:${state.output})${append}`;\n\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\n\npicomatch.makeRe = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let returnOutput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = {\n    negated: false,\n    fastpaths: true\n  };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\n\npicomatch.constants = constants;\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;","map":{"version":3,"names":["path","require","scan","parse","utils","constants","isObject","val","Array","isArray","picomatch","glob","options","returnState","fns","map","input","arrayMatcher","str","isMatch","state","isState","tokens","TypeError","opts","posix","isWindows","regex","compileRe","makeRe","isIgnored","ignore","ignoreOpts","onMatch","onResult","matcher","returnObject","match","output","test","result","onIgnore","format","toPosixSlashes","capture","matchBase","basename","exec","Boolean","RegExp","patterns","pattern","p","fastpaths","returnOutput","prepend","contains","append","source","negated","toRegex","parsed","flags","nocase","err","debug","module","exports"],"sources":["C:/reactnative/TescaroTechAviacaoWeb/node_modules/picomatch/lib/picomatch.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst scan = require('./scan');\nconst parse = require('./parse');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState\n    ? picomatch.compileRe(glob, options)\n    : picomatch.makeRe(glob, options, false, true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false, output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match), match, output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options, fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch.scan = (input, options) => scan(input, options);\n\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${state.output})${append}`;\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = { negated: false, fastpaths: true };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch.constants = constants;\n\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}