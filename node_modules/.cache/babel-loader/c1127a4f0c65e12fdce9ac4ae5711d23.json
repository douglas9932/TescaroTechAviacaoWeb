{"ast":null,"code":"'use strict';\n\nconst stringify = require('./lib/stringify');\n\nconst compile = require('./lib/compile');\n\nconst expand = require('./lib/expand');\n\nconst parse = require('./lib/parse');\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\n\nconst braces = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let output = [];\n\n  if (Array.isArray(input)) {\n    for (let pattern of input) {\n      let result = braces.create(pattern, options);\n\n      if (Array.isArray(result)) {\n        output.push(...result);\n      } else {\n        output.push(result);\n      }\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = [...new Set(output)];\n  }\n\n  return output;\n};\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\n\nbraces.parse = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return parse(input, options);\n};\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.stringify = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n\n  return stringify(input, options);\n};\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.compile = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  return compile(input, options);\n};\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.expand = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  let result = expand(input, options); // filter out empty strings if specified\n\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  } // filter out duplicates if specified\n\n\n  if (options.nodupes === true) {\n    result = [...new Set(result)];\n  }\n\n  return result;\n};\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\n\nbraces.create = function (input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n  return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);\n};\n/**\n * Expose \"braces\"\n */\n\n\nmodule.exports = braces;","map":{"version":3,"names":["stringify","require","compile","expand","parse","braces","input","options","output","Array","isArray","pattern","result","create","push","concat","nodupes","Set","noempty","filter","Boolean","length","module","exports"],"sources":["C:/reactnative/TescaroTechAviacaoWeb/node_modules/braces/index.js"],"sourcesContent":["'use strict';\n\nconst stringify = require('./lib/stringify');\nconst compile = require('./lib/compile');\nconst expand = require('./lib/expand');\nconst parse = require('./lib/parse');\n\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\nconst braces = (input, options = {}) => {\n  let output = [];\n\n  if (Array.isArray(input)) {\n    for (let pattern of input) {\n      let result = braces.create(pattern, options);\n      if (Array.isArray(result)) {\n        output.push(...result);\n      } else {\n        output.push(result);\n      }\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = [...new Set(output)];\n  }\n  return output;\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\nbraces.parse = (input, options = {}) => parse(input, options);\n\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.stringify = (input, options = {}) => {\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n  return stringify(input, options);\n};\n\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.compile = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n  return compile(input, options);\n};\n\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.expand = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  let result = expand(input, options);\n\n  // filter out empty strings if specified\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  }\n\n  // filter out duplicates if specified\n  if (options.nodupes === true) {\n    result = [...new Set(result)];\n  }\n\n  return result;\n};\n\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.create = (input, options = {}) => {\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n return options.expand !== true\n    ? braces.compile(input, options)\n    : braces.expand(input, options);\n};\n\n/**\n * Expose \"braces\"\n */\n\nmodule.exports = braces;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}