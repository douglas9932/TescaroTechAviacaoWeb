{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nconst {\n  CHAR_ASTERISK,\n\n  /* * */\n  CHAR_AT,\n\n  /* @ */\n  CHAR_BACKWARD_SLASH,\n\n  /* \\ */\n  CHAR_COMMA,\n\n  /* , */\n  CHAR_DOT,\n\n  /* . */\n  CHAR_EXCLAMATION_MARK,\n\n  /* ! */\n  CHAR_FORWARD_SLASH,\n\n  /* / */\n  CHAR_LEFT_CURLY_BRACE,\n\n  /* { */\n  CHAR_LEFT_PARENTHESES,\n\n  /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,\n\n  /* [ */\n  CHAR_PLUS,\n\n  /* + */\n  CHAR_QUESTION_MARK,\n\n  /* ? */\n  CHAR_RIGHT_CURLY_BRACE,\n\n  /* } */\n  CHAR_RIGHT_PARENTHESES,\n\n  /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET\n  /* ] */\n\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\n\nconst scan = (input, options) => {\n  const opts = options || {};\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = {\n    value: '',\n    depth: 0,\n    isGlob: false\n  };\n\n  const eos = () => index >= length;\n\n  const peek = () => str.charCodeAt(index + 1);\n\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = {\n        value: '',\n        depth: 0,\n        isGlob: false\n      };\n      if (finished === true) continue;\n\n      if (prev === CHAR_DOT && index === start + 1) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n\n          continue;\n        }\n\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n\n        continue;\n      }\n\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;","map":{"version":3,"names":["utils","require","CHAR_ASTERISK","CHAR_AT","CHAR_BACKWARD_SLASH","CHAR_COMMA","CHAR_DOT","CHAR_EXCLAMATION_MARK","CHAR_FORWARD_SLASH","CHAR_LEFT_CURLY_BRACE","CHAR_LEFT_PARENTHESES","CHAR_LEFT_SQUARE_BRACKET","CHAR_PLUS","CHAR_QUESTION_MARK","CHAR_RIGHT_CURLY_BRACE","CHAR_RIGHT_PARENTHESES","CHAR_RIGHT_SQUARE_BRACKET","isPathSeparator","code","depth","token","isPrefix","isGlobstar","Infinity","scan","input","options","opts","length","scanToEnd","parts","slashes","tokens","str","index","start","lastIndex","isBrace","isBracket","isGlob","isExtglob","braceEscaped","backslashes","negated","negatedExtglob","finished","braces","prev","value","eos","peek","charCodeAt","advance","next","push","noext","isExtglobChar","nonegate","noparen","base","prefix","glob","slice","unescape","removeBackslashes","state","maxDepth","prevIndex","idx","n","i","module","exports"],"sources":["C:/reactnative/TescaroTechAviacaoWeb/node_modules/picomatch/lib/scan.js"],"sourcesContent":["'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}